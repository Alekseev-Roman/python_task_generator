{"version":3,"file":"js/797.24cfb3f0.js","mappings":"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","sources":["webpack://pygenerator/./src/components/generate-task/coderunnerTaskCard.vue","webpack://pygenerator/src/components/generate-task/coderunnerTaskCard.vue","webpack://pygenerator/./src/components/generate-task/coderunnerTaskCard.vue?c669","webpack://pygenerator/./src/components/generate-task/coderunnerTaskCard.vue?20d2","webpack://pygenerator/./src/components/generate-task/multichoiceTaskCard.vue","webpack://pygenerator/src/components/generate-task/multichoiceTaskCard.vue","webpack://pygenerator/./src/components/generate-task/multichoiceTaskCard.vue?ac95","webpack://pygenerator/./src/components/generate-task/multichoiceTaskCard.vue?d533","webpack://pygenerator/./node_modules/file-saver/dist/FileSaver.min.js","webpack://pygenerator/./node_modules/marked/lib/marked.esm.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',[_c('div',{staticClass:\"d-flex flex-grow-1 justify-content-left\"},[_c('span',{staticClass:\"text\"},[_vm._v(\"Тип coderunner: \")]),_c('span',{staticClass:\"text ml-3\"},[_vm._v(_vm._s(_vm.task.coderunner_type))])]),_c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Условие\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.question_text),expression:\"task.question_text\"}],staticClass:\"form-control\",attrs:{\"rows\":\"7\",\"readonly\":\"\"},domProps:{\"value\":(_vm.task.question_text)},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(_vm.task, \"question_text\", $event.target.value)}}})]),_c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Условие, отображаемое студенту\")]),_c('b-card',[_c('div',{staticClass:\"text\",domProps:{\"innerHTML\":_vm._s(_vm.markdownToHtml(_vm.task.question_text))}})])],1),_c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Заполнение шаблона\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.template_params),expression:\"task.template_params\"}],staticClass:\"form-control\",attrs:{\"rows\":\"5\",\"readonly\":\"\"},domProps:{\"value\":(_vm.task.template_params)},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(_vm.task, \"template_params\", $event.target.value)}}})]),_c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Код проверки\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.template),expression:\"task.template\"}],staticClass:\"form-control\",attrs:{\"rows\":\"12\",\"readonly\":\"\"},domProps:{\"value\":(_vm.task.template)},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(_vm.task, \"template\", $event.target.value)}}})]),_c('div',{staticClass:\"text-left mt-3\"},[(_vm.task.test_cases)?_c('label',{staticClass:\"text\"},[_vm._v(\"Тестовые примеры\")]):_vm._e(),_vm._l((Object.keys(_vm.task.test_cases.test_code)),function(index){return _c('b-card',{key:index,staticClass:\"mt-2\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Пример\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.test_cases.test_code[index]),expression:\"task.test_cases.test_code[index]\"}],staticClass:\"form-control\",attrs:{\"rows\":\"5\",\"readonly\":\"\"},domProps:{\"value\":(_vm.task.test_cases.test_code[index])},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(_vm.task.test_cases.test_code, index, $event.target.value)}}}),_c('label',{staticClass:\"text mt-2\"},[_vm._v(\"Результат\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.test_cases.expected[index]),expression:\"task.test_cases.expected[index]\"}],staticClass:\"form-control\",attrs:{\"rows\":\"5\",\"readonly\":\"\"},domProps:{\"value\":(_vm.task.test_cases.expected[index])},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(_vm.task.test_cases.expected, index, $event.target.value)}}}),(_vm.task.test_cases.use_as_example[index])?_c('span',{staticClass:\"text mt-2\"},[_vm._v(\"Используется как пример\")]):_vm._e()])})],2)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <div class=\"d-flex flex-grow-1 justify-content-left\">\n      <span class=\"text\">Тип coderunner: </span>\n      <span class=\"text ml-3\">{{task.coderunner_type}}</span>\n    </div>\n    <div class=\"text-left mt-3\">\n      <label class=\"text\">Условие</label>\n      <textarea class=\"form-control\" rows=\"7\" v-model=\"task.question_text\" readonly></textarea>\n    </div>\n    <div class=\"text-left mt-3\">\n      <label class=\"text\">Условие, отображаемое студенту</label>\n      <b-card>\n        <div class=\"text\" v-html=\"markdownToHtml(task.question_text)\"></div>\n      </b-card>\n    </div>\n    <div class=\"text-left mt-3\">\n      <label class=\"text\">Заполнение шаблона</label>\n      <textarea class=\"form-control\" rows=\"5\" v-model=\"task.template_params\" readonly></textarea>\n    </div>\n    <div class=\"text-left mt-3\">\n      <label class=\"text\">Код проверки</label>\n      <textarea class=\"form-control\" rows=\"12\" v-model=\"task.template\" readonly></textarea>\n    </div>\n    <div class=\"text-left mt-3\">\n      <label class=\"text\" v-if=\"task.test_cases\">Тестовые примеры</label>\n      <b-card v-for=\"index in Object.keys(task.test_cases.test_code)\" :key=\"index\" class=\"mt-2\">\n        <label class=\"text\">Пример</label>\n        <textarea class=\"form-control\" rows=\"5\" v-model=\"task.test_cases.test_code[index]\" readonly></textarea>\n<!--        <label class=\"text mt-2\">Ввод</label>-->\n<!--        <textarea class=\"form-control\" rows=\"5\" readonly></textarea>-->\n        <label class=\"text mt-2\">Результат</label>\n        <textarea class=\"form-control\" rows=\"5\" v-model=\"task.test_cases.expected[index]\" readonly></textarea>\n        <span class=\"text mt-2\" v-if=\"task.test_cases.use_as_example[index]\">Используется как пример</span>\n      </b-card>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {Vue, Component} from 'vue-property-decorator';\nimport {marked} from \"marked\";\n\n@Component({\n  props: ['task'],\n})\nexport default class CoderunnerTaskCard extends Vue {\n  private markdownToHtml(question_text: string) {\n    if (question_text != null) {\n      return marked(question_text)\n    }\n    return \"\"\n  }\n}\n</script>\n\n<style scoped>\n\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./coderunnerTaskCard.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./coderunnerTaskCard.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./coderunnerTaskCard.vue?vue&type=template&id=3622bf96&scoped=true\"\nimport script from \"./coderunnerTaskCard.vue?vue&type=script&lang=ts\"\nexport * from \"./coderunnerTaskCard.vue?vue&type=script&lang=ts\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3622bf96\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',[_c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Условие\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.question_text),expression:\"task.question_text\"}],staticClass:\"form-control\",attrs:{\"rows\":\"7\",\"readonly\":\"\"},domProps:{\"value\":(_vm.task.question_text)},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(_vm.task, \"question_text\", $event.target.value)}}})]),_c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Условие, отображаемое студенту\")]),_c('b-card',[_c('div',{staticClass:\"text\",domProps:{\"innerHTML\":_vm._s(_vm.markdownToHtml(_vm.task.question_text))}})])],1),_vm._m(0),_vm._l((Object.keys(_vm.task.answers.answer)),function(index){return _c('b-card',{key:index,staticClass:\"text-left mt-2\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Вариант ответа\")]),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.answers.answer[index]),expression:\"task.answers.answer[index]\"}],staticClass:\"form-control\",attrs:{\"rows\":\"2\",\"readonly\":\"\"},domProps:{\"value\":(_vm.task.answers.answer[index])},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(_vm.task.answers.answer, index, $event.target.value)}}}),_c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Вариант, отображаемый студенту\")]),_c('b-card',[_c('div',{staticClass:\"text\",domProps:{\"innerHTML\":_vm._s(_vm.markdownToHtml(_vm.task.answers.answer[index]))}})])],1),_c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Оценка\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.task.answers.answer_fraction[index]),expression:\"task.answers.answer_fraction[index]\"}],staticClass:\"ml-5\",attrs:{\"type\":\"number\",\"id\":\"grade\",\"name\":\"grade\",\"min\":\"-100\",\"max\":\"100\",\"readonly\":\"\"},domProps:{\"value\":(_vm.task.answers.answer_fraction[index])},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(_vm.task.answers.answer_fraction, index, $event.target.value)}}}),_c('span',{staticClass:\"text ml-2\"},[_vm._v(\"%\")])])])})],2)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"text-left mt-3\"},[_c('label',{staticClass:\"text\"},[_vm._v(\"Варианты ответа\")])])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <div class=\"text-left mt-3\">\n      <label class=\"text\">Условие</label>\n      <textarea class=\"form-control\" rows=\"7\" v-model=\"task.question_text\" readonly></textarea>\n    </div>\n    <div class=\"text-left mt-3\">\n      <label class=\"text\">Условие, отображаемое студенту</label>\n      <b-card>\n        <div class=\"text\" v-html=\"markdownToHtml(task.question_text)\"></div>\n      </b-card>\n    </div>\n    <div class=\"text-left mt-3\">\n      <label class=\"text\">Варианты ответа</label>\n    </div>\n    <b-card v-for=\"index in Object.keys(task.answers.answer)\" :key=\"index\" class=\"text-left mt-2\">\n      <label class=\"text\">Вариант ответа</label>\n      <textarea class=\"form-control\" rows=\"2\" v-model=\"task.answers.answer[index]\" readonly></textarea>\n      <div class=\"text-left mt-3\">\n        <label class=\"text\">Вариант, отображаемый студенту</label>\n        <b-card>\n          <div class=\"text\" v-html=\"markdownToHtml(task.answers.answer[index])\"></div>\n        </b-card>\n      </div>\n      <div class=\"text-left mt-3\">\n        <label class=\"text\">Оценка</label>\n        <input class=\"ml-5\" type=\"number\" id=\"grade\" name=\"grade\" min=\"-100\" max=\"100\" v-model=\"task.answers.answer_fraction[index]\" readonly/>\n        <span class=\"text ml-2\">%</span>\n      </div>\n    </b-card>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {Vue, Component} from 'vue-property-decorator';\nimport { answerNumbers } from \"@/store\";\nimport {marked} from \"marked\";\n\n@Component({\n  props: ['task']\n})\nexport default class MultichoiceTaskCard extends Vue {\n  private answerNumbers = answerNumbers\n  private selectedAnswerNumber = 0\n\n  private markdownToHtml(text: string) {\n    if (text != null) {\n      return marked(text)\n    }\n    return \"\"\n  }\n}\n</script>\n\n\n<style scoped>\n\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./multichoiceTaskCard.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./multichoiceTaskCard.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./multichoiceTaskCard.vue?vue&type=template&id=61f435d0&scoped=true\"\nimport script from \"./multichoiceTaskCard.vue?vue&type=script&lang=ts\"\nexport * from \"./multichoiceTaskCard.vue?vue&type=script&lang=ts\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"61f435d0\",\n  null\n  \n)\n\nexport default component.exports","(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map","/**\n * marked v12.0.1 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n"],"names":["render","_vm","this","_c","_self","_setupProxy","staticClass","_v","_s","task","coderunner_type","directives","name","rawName","value","question_text","expression","attrs","domProps","on","$event","target","composing","$set","markdownToHtml","template_params","template","test_cases","_e","_l","Object","keys","test_code","index","key","expected","use_as_example","staticRenderFns","CoderunnerTaskCard","Vue","marked","__decorate","Component","props","component","_m","answers","answer","answer_fraction","MultichoiceTaskCard","constructor","args","_defineProperty","answerNumbers","text","b","a","autoBom","console","warn","test","type","Blob","c","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","error","send","status","e","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","download","rel","href","origin","location","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","val","valSource","getRegex","cleanUrl","encodeURI","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","length","pop","splice","push","rtrim","invert","suffLen","currChar","slice","findClosingBracket","indexOf","level","outputLink","cap","link","raw","lexer","state","inLink","token","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","create","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","Error","keepPrevChar","includes","lastIndexOf","startInline","_Renderer","infostring","quote","startatt","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parser","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","static","Set","preprocess","markdown","postprocess","processAllTokens","Marked","defaults","setOptions","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","callback","values","concat","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","throwError","toString","all","catch","message","msg","reject","markedInstance","getDefaults"],"sourceRoot":""}